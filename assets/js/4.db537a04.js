(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{150:function(t,s,n){t.exports=n.p+"assets/img/architecture3.1b8a3d36.png"},151:function(t,s,n){t.exports=n.p+"assets/img/callstack2.ae30ca49.png"},152:function(t,s,n){t.exports=n.p+"assets/img/callstack1.0a9fdb84.png"},154:function(t,s,n){"use strict";n.r(s);var a=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"_4-함수와-콜스택"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-함수와-콜스택","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. 함수와 콜스택")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"함수"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#함수","aria-hidden":"true"}},[this._v("#")]),this._v(" 함수")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("예를 들어, 3년치 월급이 기록되어있는 엑셀파일이 있고 이것을 그래프로 그려주는 노트 프로그램을 작성한다고 해봅시다. 이때 만드는 함수는 "),s("code",[this._v("엑셀 파일을 읽는 함수")]),this._v(", "),s("code",[this._v("날짜와 월급을 매핑해서 배열에 저장하는 함수")]),this._v(", "),s("code",[this._v("그래프를 그려주는 함수")]),this._v(" 이렇게 크게 3개의 함수를 만들것입니다. 만약, 엑셀 파일을 읽는 함수를 한번 만들어 두었다면 재사용할 수 있을 것입니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("또 다른 예로, 바둑판에서 원하는 목표 지점으로 가는 로봇 프로그램을 만든다고 가정해봅시다. 목표 지점으로 가기위해서는 "),n("code",[t._v("위로 가기")]),t._v(", "),n("code",[t._v("아래로 가기")]),t._v(", "),n("code",[t._v("오른쪽으로 가기")]),t._v(", "),n("code",[t._v("왼쪽으로 가기")]),t._v(" 이렇게 4가지 기본 단위가 필요할 겁니다. 이 하나하나가 프로그램에서는 함수가 됩니다.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"function-declaration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-declaration","aria-hidden":"true"}},[this._v("#")]),this._v(" Function declaration")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("자바스크립트에서 함수는 어떻게 만들 수 있을까요? 가장 간단하게 JavaScript에서 이름을 파라미터로 받아서 Hello 문구를 출력하는 함수를 만들어봅시다. 문법은 "),s("code",[this._v("function")]),this._v(" 키워드 뒤에 함수 이름, 그 뒤에 괄호를 넣어주면 됩니다. 괄호 뒤에 중괄호를 시작하고 그 안에 함수가 불리면 실행해야하는 코드를 작성하면 됩니다. 그리고 함수명과 그 뒤에 괄호를 붙여 실행하면 해당 함수가 실행되게 됩니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 함수 선언")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hello'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 함수 실행")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("returnHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Hello'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" returnValue "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("returnHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnValue"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// > Hello")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("함수에서 리턴("),s("code",[this._v("return")]),this._v(") 키워드는 값뿐만 아니라 프로그래밍의 흐름도 같이 돌려줍니다. 다시 말해, return 문구 이후의 코드는 동작하지 않습니다. 아래 예제에서 hello 함수 내부의 console.log는 불리지 않습니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Hello'")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// 절대로 실행되지 않는 코드")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" output "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Hello")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("여기서 한가지 궁금한점이 생기실 겁니다. "),s("code",[this._v("함수를 사용하기 이전에 선언해야할까요 아니면 이후에 선언해야할까요?")]),this._v(". 답은 위와 어디에서든지 선언해도 상관없다는 것입니다. 자바스크립트 엔진은 프로그램을 실행하기전에 함수 선언(Function declaration)을 통해 등록된 함수들은 미리 등록해놓고 있습니다. 아래 코드는 에러 없이 두번의 Hello Node.js가 출력되게 됩니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// > Hello Node.js")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello Node.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// > Hello Node.js")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"function-parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-parameters","aria-hidden":"true"}},[this._v("#")]),this._v(" Function Parameters")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("함수를 실행할때에 해당 함수에 값을 전달할 수 있습니다. 예를 들어, 오른쪽으로 가라는 함수를 만들었다면 몇칸이나 이동할지 전달하는 방식입니다. 이렇게 전달받는 값을 "),s("code",[this._v("함수 파라미터")]),this._v("라고 합니다. 함수 파라미터를 받기 위해서는 먼저 함수 선언시에 받고자 하는 파라미터를 괄호안에 명시해야합니다. 그리고 함수를 실행할때 괄호안에 전달하고 싶은 값을 넣어주면 됩니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 함수 선언")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("moveRight")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stepCount"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Move ${stepCount} steps to right'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 함수 실행")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("moveRight")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),s("p",[this._v("console.log에서 사용한 ${stepCount}가 익숙치 않다면 "),s("a",{attrs:{href:"question_answer#%EC%8A%A4%ED%8A%B8%EB%A7%81-%EC%9D%B8%ED%84%B0%ED%8F%B4%EB%A0%88%EC%9D%B4%EC%85%98"}},[this._v("스트링 인터폴레이션")]),this._v("을 참고하세요.")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 함수 선언")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 함수 실행")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hi'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Re:coder'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'  '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("에러가 발생할까요? 아니면 “hello” 만 출력이 될까요? 정답은 "),s("code",[this._v("hello undefined")]),this._v("입니다. 지금부터 그 이유를 알아봅시다.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("자바스크립트 함수는 파라미터의 갯수와 상관없이 함수명으로 해당 함수를 호출합니다. 예를 들어, 아래와 같이 "),s("code",[this._v("say")]),this._v(" 함수에 5개의 파라미터를 보내면 그 중에 쓸것만 쓰고 나머지는 버리는 식입니다. say함수는 첫번째와 두번째 파라미터만 사용하기 때문에, 그 뒤에 들어오는 1부터 4까지는 사용하지 않는것입니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'  '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"yuhwan"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// No Error")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("처음의 예제처럼 사용하고자 하는 파라미터의 숫자보다 적게 데이터가 전달된다면 해당 변수는 "),s("code",[this._v("선언만 되었고 값이 할당이 되지 않았기 때문에 undefined")]),this._v(" 값으로 저장되는 것입니다. 똑같이 만약 3개의 파라미터를 원하는 함수가 있는데 첫번째 값만 보낸다면 나머지 2개는 undefined인 셈이지요.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'  '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),s("p",[this._v("비교 연산자로 === 를 사용하는것이 익숙치 않다면 "),s("a",{attrs:{href:"question_answer#triple-equals"}},[this._v("Triple equals")]),this._v("를 참조하세요.")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Node.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'  '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// Hello Node.js")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Yuhwan"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// Hello Yuhwan")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"function-expression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-expression","aria-hidden":"true"}},[this._v("#")]),this._v(" Function expression")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("지금까지는 다른 언어들과 동일한 개념에서 함수를 배워보았습니다. 지금부터는 JavaScript 함수 특징에 대해서 알아봅시다. JavaScript 함수의 가장 큰 특징은 "),s("code",[this._v("함수를 변수에 할당할 수 있다")]),this._v("는 것입니다. 변수에 값으로 할당될 수 있다는 것은 다른 함수에 파라미터로 넘길 수 있다는 것이며, 함수의 리턴값으로 받을 수 있다는 것입니다. 함수를 변수에 굳이 할당할 필요가 있어? 라고 생각하실지 모르겠지만 이 부분을 이해하는것은 굉장히 중요합니다. 조금만 더 참고 계속 읽어주세요 😃")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("sayHello")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello Node.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("이렇게 함수를 변수에 할당하는 것을 "),s("code",[this._v("Function expression")]),this._v("이라고 하고 위에서 함수를 선언하는 것을 "),s("code",[this._v("Function declaration")]),this._v("이라고 말합니다. 함수를 선언할때는 함수를 부르는 곳과 상관없이 위아래 어디든 위치에 제한이 없었지만, Function expression은 반드시 사용하기 전에 함수를 선언해야합니다. 아래와 같이 코드를 작성하면 에러가 발생합니다. sayHello라는 변수를 찾을 수 없기 때문입니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("sayHello")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// ReferenceError: sayHello is not defined")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("sayHello")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello Node.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("execute")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("operand1"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operand2"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("operator")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("operand1"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operand2"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("sum")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("operand1"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operand2"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" operand1 "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" operand2\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("multiply")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("operand1"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operand2"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" operand1 "),n("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" operand2\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("execute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("execute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" multiply"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"arrow-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arrow-function","aria-hidden":"true"}},[this._v("#")]),this._v(" Arrow Function")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"danger custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("WARNING")]),s("p",[this._v("화살표 함수는 Function declaration을 대체하지 않고 Function expression을 대체하는 용도 입니다.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("이제 문법에 대해서 알아봅시다. 화살표 함수에서는 "),s("code",[this._v("function")]),this._v(" 키워드를 제외시키고 화살표("),s("code",[this._v("=>")]),this._v(")를 대신 사용합니다. 대신 화살표는 괄호 뒤에 들어가게 됩니다. 똑같은 함수를 Function expression과 Arrow function을 만들어 봅시다. 함수를 실행하는 방법은 두 방식 모두 동일합니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 함수 선언")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("hiFunctionExpression")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hi Function Expression'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 함수 실행")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("hiFunctionExpression")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 함수 선언")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("hiArrowFunction")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hi Arrow Function'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 함수 실행")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("hiArrowFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("greeting"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v(": -- ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" output "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hi'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Re:coder'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("이제 화살표 함수가 가지고 있는 장점에 대해서 살펴봅시다. 먼저 한줄로 구성된 함수는 중괄호를 생략할 수 있다는 것입니다. 예를 들어, "),s("code",[this._v("console.log")]),this._v("로 출력하는 함수는 아래와 같이 선언할 수 있습니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("greeting"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v(": -- ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("say")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hi'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Re:coder'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("여기에서 더 나가서 리턴을 하는 한줄짜리 코드는 "),s("code",[this._v("return")]),this._v(" 키워드 역시 생략할 수 있다는 것입니다. 비교를 위해서 동일한 함수를 Function expression과 Arrow functon으로 만들어 보도록 하겠습니다. 어떤가요? 아주 간편해진게 느껴지시나요?Arrow Function이 제공하는 간략한 문법은 앞으로 배우게될 콜백함수와 함수형 프로그래밍에서 강력한 장점으로 작용합니다.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[t._v(" ")]),n("br")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("sumExpression")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("sumArrow")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"콜-스택"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#콜-스택","aria-hidden":"true"}},[this._v("#")]),this._v(" 콜 스택")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("firstFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("secondFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token function"}},[t._v("firstFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("thirdFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token function"}},[t._v("secondFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("thirdFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("콜 스택은 자바스크립트에서 함수의 실행순서를 순차적으로 실행시키기 위해 사용하는 하나의 도구 입니다. "),s("code",[this._v("콜 스택은 (위가 뚤린) 상자")]),this._v("라고 생각하시면 됩니다. 이 상자는 독특한 특징을 가지고 있는데 바로 아이템을 하나씩 넣은 후 다시 뺄때는 항상 가장 위에 있는 아이템부터 빼야 한다는 것입니다. 자바스크립트에서 "),s("code",[this._v("하나의 함수가 실행되면, 콜 스택에 해당 함수를 위한 아이템")]),this._v("을 하나씩 넣습니다. 만약 하나의 함수가 리턴문을 만나거나 마지막 줄이 실행되어 종료되면, 해당 함수를 콜 스택에서 밖으로 빼서 없앱니다. 위의 예제를 실행시키면 아래 그림처럼 동작하는 것입니다.")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",{attrs:{align:"center"}},[s("img",{attrs:{src:n(152),height:"600"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("조금 더 복잡한 예제를 통해 한번 콜 스택의 작동에 대해서 생각해보는 시간을 가져봅시다. 아래와 같은 코드를 동작시키면 콜 스택은 어떻게 변화하게 될까요? 위의 그림처럼 한 스텝 한 스텝 생각해보세요. "),s("code",[this._v("console.log")]),this._v("도 하나의 함수라는 점에 유의해주세요.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// Function expression")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token function-variable function"}},[t._v("callme")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("start")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("with")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'시작'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("with")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'끝'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("start")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callme"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",{attrs:{align:"center"}},[s("img",{attrs:{src:n(151),height:"600"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",{attrs:{align:"center"}},[s("img",{attrs:{src:n(150),height:"300"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"homework"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#homework","aria-hidden":"true"}},[this._v("#")]),this._v(" Homework")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"function"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"call"')]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],o=n(0),e=Object(o.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._m(1),n("p",[t._v("함수(Function)는 코딩을 통해 원하는 프로그램을 만들때, 이 프로그램을 구성하는 생각의 기본 단위입니다. 원하는 결과값을 얻기까지 수행해야하는 작업을 작은 단위로 구분하기 위해 사용합니다. 이렇게 작은 단위로 구분하면 아주 복잡하고 어려웠던 문제가 작은 문제 하나 하나로 구분이 되어 문제 해결을 보다 쉽게 할 수 있습니다. 또한, 한번 구분되어있는 함수는 재사용을 할 수 있다는 장점도 가지게 됩니다.")]),t._m(2),t._m(3),n("p",[t._v("이제 Node에서 자바스크립트 문법을 활용해 함수를 만들어 봅시다.")]),t._m(4),t._m(5),t._m(6),n("p",[t._v("이번에는 출력하는데에서 그치지 않고 값을 리턴하는 함수를 만들어봅시다. 자바스크립트는 "),n("router-link",{attrs:{to:"variable_array.html#동적-타이핑"}},[t._v("동적 타이핑")]),t._v("을 사용하기 때문에 어떠한 형태의 값도 리턴할 수 있습니다. 그리고 함수 선언 문구에서 리턴 타입을 알려줄 필요도 없습니다.")],1),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),n("p",[t._v("파라미터는 한개에 국한되지 않습니다. 함수에서 원하는 만큼의 파라미터를 받을 수 있습니다. 환영 문구와 이름을 함께 받는 say 함수를 만들어 봅시다.")]),t._m(16),n("p",[t._v("지금부터는 함수의 파라미터에 대해서 조금 자세히 알아봅시다. 보통 함수에 2개의 파라미터를 받겠다고 선언하면, 2개의 값을 보내는게 일반적일겁니다. 하지만, 만약 하나의 파라미터값만 전달하면 어떻게 될까요? 아래처럼 말이죠.")]),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),n("p",[t._v("이런 방식의 언어 디자인은 다음과 같이 선택적으로 파라미터값을 넘겨야하는 코드를 작성하는데 유용합니다. 예를 들어, 이름값을 주면 해당 이름과 함께 greeting 문구를 찍고 아니면, greeting 문구만 찍는 코드를 다음과 같이 작성할 수 있습니다.")]),t._m(23),t._m(24),n("p",[t._v("여기에서 조금 더 나아가봅시다. 만약 파라미터 값을 전달 받지 못하면 사용할 기본값을 설정할 수는 없을까요? 이것은 함수를 선언할 때 파라미터 옆에 아래와 같이 기본값을 줌으로써 가능합니다.")]),t._m(25),t._m(26),t._m(27),n("p",[t._v("먼저, 함수를 변수에 할당해봅시다. 기존과 동일한 문법을 사용하는 것 같지만, function 뒤에 함수명이 들어가지 않는다는 것에 주목합시다. 이렇게 기억해주세요. 변수에 1이라는 값을 할당하면, 메모리 어딘가에 1을 저장하는 것처럼 함수를 할당하면 그 공간에 function 이하의 코드가 저장되어있다고 말이죠. 그리고 해당 변수를 불러오면, 그때 이 function 이하의 코드를 실행시키고 그 값을 시스템에 전달해준다고 생각하면 됩니다.")]),t._m(28),t._m(29),t._m(30),n("p",[t._v("이제 함수를 다른 함수의 파라미터로 전달해서 사용해보는 예제를 만들어봅시다. 수학적인 계산을 실행하라는 execute라는 함수를 만들어보겠습니다. 그리고 이 execute 함수의 처음 2개 파라미터는 계산에 사용될 값 (operand)이고 마지막 3번째 파라미터는 어떤 연산을 수행할지 결정하는 함수 (operator)를 가집니다. 이렇게 만들면 더하기를 하고 싶으면 3번째 파라미터에 덧셈 함수를, 곱하기를 하고 싶으면 곱셈함수를 전달하는 방식으로 execute 함수를 만들 수 있습니다.")]),t._m(31),n("p",[t._v("물론 sum(2,5) / multiply(2,5) 를 부르면 되지 뭐하러 execute 함수를 만드냐. 라고 생각하실 수 있지만, 여기에서는 execute 함수의 opeator에만 주목해주세요. 함수가 자연스럽게 파라미터로 전달되고 이 함수를 변수명()의 방식으로 실행시킬 수 있다는 것에 익숙해지셔야합니다.")]),t._m(32),n("p",[t._v("자바스크립트 커뮤니티에서는 오랫동안 function expression의 문법이 불편하다는 이야기가 있었습니다. 이런 여론을 반영해 최근 화살표 함수(Arrow Function)의 사용이 가능하게 되었습니다.")]),t._m(33),t._m(34),t._m(35),n("p",[t._v("화살표 함수에서 파라미터를 등록하는 방법은 Function expression과 동일합니다. 괄호 안에 원하는 변수명을 넣는 방식입니다.")]),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),n("p",[t._v("지금부터는 자바스크립트 엔진의 내부를 조금 더 자세히 살펴보는 시간을 가지고자 합니다. 이 부분을 이해하는 것은 매우 매우 중요합니다. 자바스크립트가 함수를 실행시키면 내부에서는 무슨일이 일어나는 걸까요? 먼저, 예제를 살펴봅시다. 아래 예제에서 우리는 3개의 함수를 선언했습니다. 각 함수는 다른 함수를 부르고 있어서, 세번째 함수를 실행시키면 두번째 함수, 첫번째 함수가 차례로 불리게 됩니다.")]),t._m(42),t._m(43),t._m(44),t._m(45),t._m(46),n("p",[t._v("자바스크립트 콜 스택의 한 스텝 한 스텝은 아래와 같이 그려질 것입니다. 마지막 메인 함수 종료와 프로그램 종료는 생각했지만, 물론 위와 동일하게 한 스텝씩 진행됩니다.")]),t._m(47),n("p",[t._v("마지막으로 노드와 브라우저를 비교하는 그림에 콜 스택을 채워넣어봅시다. 콜 스택은 노드나 브라우저가 아닌 V8에 속해있는 기능입니다. 자바스크립트 엔진인 V8은 자바스크립트 코드를 읽고 실행시키면서 이 콜 스택에 함수를 위한 프레임을 쌓고 빼는 역할을 하는것입니다. 크롬 브라우저와 Node.JS 모두 똑같은 V8 자바스크립트 엔진을 사용하기 때문에, 브라우저에서 코드를 돌리든 노드에서 돌리든 상관없이, 이 콜 스택 부분은 V8이 관장을 하며 따라서 동일하게 동작합니다.")]),t._m(48),t._m(49),n("p",[t._v("JSON 파일에 원하는 함수 이름을 입력하면 해당 함수가 불리는 코드를 작성하세요. 참고로 자바스크립트에서 JSON 파일을 불러오는 방법은 굉장히 간단합니다. 검색을 통해 배워보세요.")]),t._m(50)])},a,!1,null,null,null);s.default=e.exports}}]);