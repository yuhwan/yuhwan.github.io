(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{160:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"_3-객체"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-객체","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 객체")]),a("h2",{attrs:{id:"객체-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체-object","aria-hidden":"true"}},[t._v("#")]),t._v(" 객체 (Object)")]),a("p",[t._v("자바스크립트에서 객체는 키와 값의 쌍으로 이루어진 데이터를 저장하는 데이터 구조입니다. 예를 들어, 사용자 정보에 대한 데이터를 아래와 같이 객체로 저장할 수 있습니다. 아래 user라는 "),a("code",[t._v("객체")]),t._v("는 이름(name)을 "),a("code",[t._v("키")]),t._v("로하고 이에 대한 "),a("code",[t._v("값")]),t._v("으로 Dan을 가지고 있습니다. 나이는 30이고 처음 사용한 날짜는 2018-01-01입니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tfirstOpen"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'2018-01-01'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"생성하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#생성하기","aria-hidden":"true"}},[t._v("#")]),t._v(" 생성하기")]),a("p",[t._v("객체와 관련된 문법에 대해서 익혀보도록 하겠습니다. 먼저, 객체는 중괄호로 표현됩니다. 아무런 데이터도 가지고 있지 않은 빈 객체는 아래와 같이 만들면 됩니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Empty object")]),t._v("\n")])])]),a("p",[t._v("위에서 잠깐 살펴봤던것처럼, 만약 처음 객체를 생성할때 원하는 값이 있다면 "),a("code",[t._v("키: 값")]),t._v(" 형태로 중괄호 내부에 선언해주면 됩니다. 이를 객체의 속성이라고 부릅니다. 예를 들어, user 객체는 name 속성을 가지고 있다고 말할 수 있습니다. 만약, 한개 이상의 속성값을 추가하고 싶을때는 쉼표로 구분해주면 됩니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"출력하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#출력하기","aria-hidden":"true"}},[t._v("#")]),t._v(" 출력하기")]),a("p",[t._v("객체 정보를 출력하고 싶을때에는 다른 작업을 할 필요없이 "),a("code",[t._v("console.log")]),t._v(" 함수에 파라미터로 전달하면 됩니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// { name: 'Dan', age: 30 }")]),t._v("\n")])])]),a("h3",{attrs:{id:"속성값-접근하기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#속성값-접근하기","aria-hidden":"true"}},[t._v("#")]),t._v(" 속성값 접근하기")]),a("p",[t._v("전체 객체를 출력하는 것이 아닌 하나의 속성값을 가지고 오고 싶을 수 있습니다. 예를 들어, 이 사용자의 이름만 출력하고 싶은 경우입니다. 이때에는 객체변수 뒤에 점(.)을 찍고 원하는 속성의 키를 입력해줌으로써 원하는 값을 가져올 수 있습니다.")]),a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Dan")]),t._v("\n")])])]),a("p",[t._v("만약 원하는 키값이 변수에 들어있는 경우에는 조금 다른 문법을 통해 값에 접근해야합니다. 위와 같이 점(.) 뒤에 변수를 입력하는 방식은 엔진이 해당 변수의 이름을 키값으로 착각하게 되기 때문입니다.")]),a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'name'")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Dan")]),t._v("\n")])])]),a("h3",{attrs:{id:"추가-변경-삭제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#추가-변경-삭제","aria-hidden":"true"}},[t._v("#")]),t._v(" 추가/변경/삭제")]),a("p",[t._v("한번 객체를 생성하고 나서도 원하는 시점에 속성값을 추가할 수 있습니다. 속성값에 접근했던 방식과 동일한 방법을 사용하, 변수에 값을 할당하는것처럼 해주면 됩니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nuser"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstOpen "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'2018-01-01'")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// { name: 'Dan', age: 30, firstOpen: '2018-01-01' }")]),t._v("\n")])])]),a("p",[t._v("꼭 새로운 속성값만을 추가해야하는 것은 아닙니다. 기존에 선언되어있는 값도 동일한 방식으로 변경이 가능합니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nuser"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("28")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 28")]),t._v("\n")])])]),a("p",[t._v("마지막으로 이미 선언된 속성값을 객체에서 삭제하고 싶은 경우도 생길 것입니다. 이때에는 조금 특별한 키워드인 "),a("code",[t._v("delete")]),t._v("를 사용합니다.")]),a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// { name: 'Dan' }")]),t._v("\n")])])]),a("h3",{attrs:{id:"keys-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keys-values","aria-hidden":"true"}},[t._v("#")]),t._v(" keys & values")]),a("p",[t._v("객체 하나 하나의 속성을 접근하는 방법은 위에서 살펴보았습니다. 만약, 하나의 객체의 모든 키값들을 가지고 오기위해서는 어떻게 해야할까요? 바로 "),a("code",[t._v("Object.keys")]),t._v(" 함수를 이용하면 됩니다. Object.keys 함수는 파라미터로 객체를 받고 리턴값으로 속성키만을 포함하는 배열을 리턴합니다. 이를 활용해서, 하나의 객체의 모든 키와 값을 반복문을 통해서 찍는 예제를 만들어 보겠습니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("keys")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// ['name','age']")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{attrs:{class:"token comment"}},[t._v("// Dan")]),t._v("\n\t"),a("span",{attrs:{class:"token comment"}},[t._v("// 30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("객체가 가지고 있는 속성값만을 가지고 오고 싶다면 "),a("code",[t._v("Object.values")]),t._v("를 활용하면 됩니다. Object.values는 Object.keys와 동일하게 객체를 파라미터로 받습니다. 차이가 있다면 값을 배열에 담아 리턴해준다는 점입니다.")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tname"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tage"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("30")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" values "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("values")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 'Dan', 30")]),t._v("\n")])])])])}],!1,null,null,null);s.default=e.exports}}]);