(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{147:function(t,a,s){t.exports=s.p+"assets/img/architecture2.b8527cfa.png"},148:function(t,a,s){t.exports=s.p+"assets/img/architecture1.2b5fedce.png"},153:function(t,a,s){t.exports=s.p+"assets/img/callstack3.890d3293.png"},156:function(t,a,s){"use strict";s.r(a);var n=[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"_6-콜백과-이벤트-루프"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-콜백과-이벤트-루프","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. 콜백과 이벤트 루프")]),n("h2",{attrs:{id:"callback-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#callback-function","aria-hidden":"true"}},[t._v("#")]),t._v(" Callback Function")]),n("p",[t._v("콜백 함수는 "),n("code",[t._v("다른 함수에 파라미터로 전달이 되었다가 특정 시점에 실행되는 함수")]),t._v("를 일컫습니다. 따라서, 파라미터로 전달되는 모든 함수는 콜백함수라고 보시면 됩니다.")]),n("p",[t._v("하지만, 우리가 흔히 콜백함수라고 부르는 함수들은 조금 더 동작하는 시점이 특정 의미를 가지는 경우가 많습니다. 가장 쉬운 예제로는 브라우저에서 사용자가 특정 버튼을 클릭하면 (특정 시점) 실행되는 함수들이 모두 콜백함수입니다. 또한, 노드에서 파일을 전부 읽고 나면 (특정 시점) 실행되는 함수 역시 콜백함수 입니다. 예제를 통해 직접 만들어 보면서 이해해봅시다.")]),n("h3",{attrs:{id:"callback-function-on-browser"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#callback-function-on-browser","aria-hidden":"true"}},[t._v("#")]),t._v(" Callback function on browser")]),n("p",[t._v("오래간만에 다시 브라우저로 돌아가봅시다. 이 수업에서는 HTML을 다루지는 않기 때문에 자바스크립트 부분에 집중해서 이해해주시면 됩니다. 아래 예제대로 "),n("code",[t._v("index.html")]),t._v(" (브라우저에서 동작시킬 것이기 때문에) 파일을 만들어 주세요.")]),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n\t"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{attrs:{class:"token script language-javascript"}},[t._v("\n\t\t\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hi'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\t"),n("span",{attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("cb")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Tada!'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("5000")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'CB?'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t")]),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n\t"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\tCallback\n\t"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),n("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[n("code",[t._v("setTimeout")]),t._v(" 함수는 브라우저에서 기본으로 제공되는 함수로 일정 시간뒤에 콜백함수를 실행시키는 역할을 합니다. 위의 예제를 돌려보면, "),n("code",[t._v("Hi")]),t._v(", "),n("code",[t._v("CB?")]),t._v(" 가 출력되었다가 5초뒤에 "),n("code",[t._v("Tada!")]),t._v(" 문구가 나오는것을 확인하실 수 있을 겁니다.")]),n("p",[t._v("이제 위에서 배운 콜 스택으로 위 예제의 함수 실행을 그려봅시다. 천천히 생각해보세요. 아마 아래처럼 그리시지 않을까 생각됩니다.")]),n("p",{attrs:{align:"center"}},[n("img",{attrs:{src:s(153),height:"600"}})]),n("p",[t._v("5번에서 setTimeout은 종료가 된걸까요? 그렇다면 7번 이후에 어떻게 다시 "),n("code",[t._v("console.log")]),t._v("가 돌아오는 걸까요? main() 함수는 종료가 되는 걸까요? 일단 이것에 대한 답은 미뤄두고 Node 환경으로 넘어가서 똑같은 함수를 구현해보죠.")]),n("h3",{attrs:{id:"callback-function-on-node-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#callback-function-on-node-js","aria-hidden":"true"}},[t._v("#")]),t._v(" Callback Function  on Node.js")]),n("p",[t._v("브라우저에서와 완전히 동일한 코드입니다. 한가지 차이가 있다면 setTimeout 함수의 시간이 0이라는 점입니다. 아무것도 기다리지 말고 곧바로 실행하라는 말이지요. 이번에는 결과가 어떻게 출력이 될까요?")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hi'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("cb")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Tada!'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'CB?'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("돌려보셨으면 아시겠지만, 결과는 브라우저때와 동일한 순서대로 출력됩니다. "),n("code",[t._v("Hi")]),t._v(", "),n("code",[t._v("CB?")]),t._v(", "),n("code",[t._v("Tada!")]),t._v(" 순서로 말이죠. 도대체 무슨일이 일어나고 있는 걸까요?")]),n("h2",{attrs:{id:"event-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-loop","aria-hidden":"true"}},[t._v("#")]),t._v(" Event Loop")]),n("p",[t._v("처음 강의에서 여러분에게 노드를 설명하면서 아래와 같은 그림을 보여드렸던 것을 기억하실 겁니다. 다시 한번 정리해보자면, 브라우저와 노드는 내부에 자바스크립트 엔진을 품고 있다는 점에서 동일합니다. 이제 아래 그림에서 비어있는 부분들을 차례로 채워보면서, 왜 "),n("code",[t._v("Hi")]),t._v(", "),n("code",[t._v("CB")]),t._v(", "),n("code",[t._v("Tada!")]),t._v(" 순서로 출력되는지 알아봅시다.")]),n("p",{attrs:{align:"center"}},[n("img",{attrs:{src:s(148),height:"300"}})]),n("h3",{attrs:{id:"_1-heap-space"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-heap-space","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. Heap Space")]),n("p",[t._v("가장 먼저 추가되는 영역은 V8 엔진 내부에 힙이라는 영역입니다. 이름이 조금 생소하겠지만 사실 데이터를 저장하는 메모리라고 생각하시면 됩니다. 자바스크립트 엔진은 내부에 일정 크기의 메모리를 시스템으로부터 얻어둡니다. 이후 자바스크립트에서 여러분이 변수를 새롭게 만들거나 함수를 선언하거나 등의 작업을 하면 필요한 값들을 이 힙 영역에 저장합니다. 크롬 브라우저와 노드는 동일하게 V8 엔진을 사용합니다. 그리고 힙의 동작방식은 V8 엔진에 속해있습니다. 때문에, 브라우저와 노드는 Heap 영역에 대해서 만큼은 완전히 동일하게 동작합니다.")]),n("p",{attrs:{align:"center"}},[n("img",{attrs:{src:s(147),height:"300"}})]),n("h3",{attrs:{id:"_2-call-stack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-call-stack","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Call stack")]),n("p",[t._v("그렇다면 위에서 새롭게 배운 콜 스택은 어디에 위치할까요? 콜 스택 역시 자바스크립트 엔진 내부에 위치하고 있습니다. 여러분이 작성한 코드를 한줄 한줄 읽으면서 동작시키는 것은 자바스크립트 엔진, 즉 V8 엔진입니다. V8엔진은 위에서 우리가 살펴봤던것처럼 함수 호출이 일어나게 되면 내부에 가지고 있는 콜 스택에 하나씩 필요한 프레임을 쌓게 됩니다.")]),n("h3",{attrs:{id:"_3-asynchronous-apis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-asynchronous-apis","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. Asynchronous APIs")]),n("p",[t._v("위 Node 환경 예제에서, setTimeout 함수에 timeout 값을 0으로 주었을때에도 setTimeout 함수에 전달한 콜백함수가 메인함수 이후에 실행되는 것을 확인했습니다. 그리고 왜 이렇게 동작하는지에 대한 답이 바로 브라우저와 Node가 가지고 있는 API 부분에 있습니다. "),n("code",[t._v("setTimeout")]),t._v(" 함수는")])])}],c=s(0),o=Object(c.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);a.default=o.exports}}]);