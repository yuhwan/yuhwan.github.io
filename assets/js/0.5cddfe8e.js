(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{147:function(t,s,a){t.exports=a.p+"assets/img/architecture2.b8527cfa.png"},162:function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"_2-변수와-배열"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-변수와-배열","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 변수와 배열")]),n("h2",{attrs:{id:"변수"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#변수","aria-hidden":"true"}},[t._v("#")]),t._v(" 변수")]),n("p",[t._v("변수(Variables)는 프로그래밍에서 가장 기초 개념입니다. 변수를 선언하면 시스템은 해당 변수를 위한 공간을 메모리에 만들어둡니다. 이후 변수에 값을 할당하면 해당 공간에 할당된 값을 저장합니다. 그리고 누군가 이 변수를 요청하면 시스템은 해당 변수의 이름을 기반으로 메모리에 값이 저장된 공간을 찾고 이 값을 전달하게 됩니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Hello Node.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("위의 예제를 다시 한번 똑같은 방법으로 해석해봅시다. 자바스크립트 엔진은 "),n("code",[t._v("var str")]),t._v(" 코드를 읽고나서 메모리에 str를 위한 공간을 만듭니다. 이후 "),n("code",[t._v("=")]),t._v(", 즉 변수에 값을 할당하라는 문법을 읽고 스트링 "),n("code",[t._v('"Hello Node.js"')]),t._v("를 "),n("code",[t._v("str")]),t._v("을 위한 만들어둔 공간에 저장합니다. 다음줄에서 "),n("code",[t._v("console.log(str)")]),t._v("을 읽은 자바스크립트 엔진은 "),n("code",[t._v("console.log")]),t._v(" 함수에 str 변수의 값을 전달해야한다는 것을 알게 됩니다. 이를 위해 메모리에서 str을 위한 공간을 찾고, 이곳에 저장되어있는 값인 "),n("code",[t._v('"Hello Node.js')]),t._v("를 "),n("code",[t._v("console.log")]),t._v(" 함수에 넘기게 됩니다.")]),n("h3",{attrs:{id:"동적-타이핑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#동적-타이핑","aria-hidden":"true"}},[t._v("#")]),t._v(" 동적 타이핑")]),n("p",[t._v("변수를 선언하는 방법에 있어서 각 언어마다 다른 문법, 다른 특징을 가지고 있습니다. 그 중에서 자바스크립트가 가지고 있는 특징은 "),n("code",[t._v("동적 타이핑 (Dynamic Typing)")]),t._v("을 사용한다는 점입니다. 동적 타이핑은 하나의 변수에 어떠한 타입의 값도 할당될 수 있는 것을 의미합니다. 예를 들어, 아래처럼 변수 하나를 선언한 후, 숫자타입의 값을 넣었다가, 그 이후 문자 타입의 값을 넣을 수 있습니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dynamic "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndynamic "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("이와 반대대는 개념으로 "),n("code",[t._v("정적 타이핑 (Static Typing)")]),t._v("이 존재합니다. 대표적인 언어로는 Java가 있습니다. 애초에 정적 타이핑을 사용하는 언어는 변수의 선언부터 차이가 납니다. 하나의 변수에는 한 종류의 값만 할당될 수 있기에, 변수 선언시에 어떤 타입의 값을 할당 받을지 명시하도록 되어있습니다 "),n("em",[t._v("(최신 정적 타이핑 언어들은 뒤에 오는 값의 타입에 따라서 자동으로 변수의 타입을 유추해서 결정하기도 합니다)")]),t._v(". 정적 타이핑 언어에서는 문자열타입의 값을 저장하는 변수를 선언하려면 "),n("code",[t._v("String")]),t._v("을 앞에 붙여야합니다. 이 변수에 숫자타입의 값을 넣으려고 시도하면 에러가 발생합니다.")]),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("String str "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// Error !!!")]),t._v("\n")])])]),n("p",[t._v("동적 타이핑, 정적 타이핑 중 어떤 디자인이 더 좋은지 이야기하기는 어렵습니다. 각각의 장단이 있기 때문이죠. 동적 타이핑은 정적 타이핑에 비해 프로그램이 간결해지고 자유도가 높습니다. 정적 타이핑은 코드만으로도 많은 부분에서 에러를 찾을 수 있으며, 강력한 자동완성 기능을 가집니다. 다만, 제 개인적으로 업무 자동화를 위한 스크립트를 작성하는데에는 동적 타이핑이 더 쉽게 느껴지긴합니다.")]),n("h3",{attrs:{id:"힙-heap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#힙-heap","aria-hidden":"true"}},[t._v("#")]),t._v(" 힙 (Heap)")]),n("p",[t._v("노드와 브라우저에서 자바스크립트 변수를 만들면 어디에 저장되는 것일까요? 바로 힙이라는 공간입니다. 힙은 하나의 메모리 공간이라고 생각하시면 됩니다. 이 안에 변수를 위한 공간을 만들고, 나중에 해당 변수를 찾으면 힙안에 저장된 값을 가지고 나오게 됩니다. 여기서 힙 공간은 자바스크립트 엔진 내부에 존재합니다. 다시 말해, 브라우저나 노드나 동일한 방식으로 힙에 변수를 할당하고 또 참조하는것입니다.")]),n("p",{attrs:{align:"center"}},[n("img",{attrs:{src:a(147),height:"300"}})]),n("h3",{attrs:{id:"const-let"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#const-let","aria-hidden":"true"}},[t._v("#")]),t._v(" const & let")]),n("p",[t._v("지금까지 변수를 선언할때 "),n("code",[t._v("var")]),t._v("를 사용했습니다. 하지만, 최신 버전의 자바스크립트에서는 더 이상 var를 사용하는것을 선호하지 않습니다. 새로운 문법인 "),n("code",[t._v("const")]),t._v("와 "),n("code",[t._v("let")]),t._v("이 제시되었기 때문입니다. var로 선언된 변수는 언제 어디서든지 값을 바꿀 수 있는 반면, "),n("code",[t._v("const")]),t._v("는 한번 값을 할당하면 다시 변경하지 못합니다. "),n("code",[t._v("let")]),t._v("은 "),n("code",[t._v("var")]),t._v("와 동일하게 선언 이후 값을 변경할 수 있습니다. 아마도 이러한 변화가 여러분에 작은 변화로 느껴지실지 모르겠지만, 조금 더 깊이 생각해 볼 필요가 있습니다.")]),n("p",[t._v("제 개인적으로 프로그램을 작성할때 가장 중요시하는 것은 의도가 명확히 드러나는 코드, 즉 "),n("code",[t._v("잘 읽히는 코드")]),t._v("를 작성하는 것입니다. 잘 읽히는 코드를 작성하면, 코드가 깔끔해질 뿐 아니라, 에러 발생확률이 줄어들고, 다른 사람(시간이 지난 후의 나를 포함해서) 이 유지보수하기 훨씬 쉬워지기 때문입니다. 변수를 선언할 때 있어서 잘 읽히는 코드를 만들기 위해서는, "),n("code",[t._v("하나의 변수는 반드시 하나의 개념을 대표")]),t._v("하도록 코드를 작성하는것이 기본입니다.")]),n("p",[t._v("예전에 "),n("code",[t._v("잘 읽히는 코드")]),t._v("에 대한 신경을 전혀 쓰지 않는 시절에는 아래처럼 코드를 작성했었습니다. "),n("code",[t._v("url")]),t._v("이라는 변수를 하나 선언해두고 처음에는 주소를 넣었다가 그 뒤에, 파라미터를 추가했다가, 다시 주소만 남겼다가 하는 형태로 말이죠. 다시 말해, "),n("code",[t._v("url")]),t._v("이라는 변수가 복합적인 의미로 사용될 수 있도록 코드를 작성한것입니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'http://localhost:8080'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// ... some codes ...")]),t._v("\nurl "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" url "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'?name=javascript'")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("//.. some codes ...")]),t._v("\nurl "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'http://localhost:8080'")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("//.. some codes ...")]),t._v("\n")])])]),n("p",[t._v("이런 측면에서 저는 "),n("code",[t._v("const")]),t._v("와 "),n("code",[t._v("let")]),t._v("을 선호합니다. 사실 var는 코드에서 사용하지 않습니다. 제가 하나의 변수를 선언할때 어떤 개념을 담기 위해서 선언했지가 명확해지기 때문입니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" host "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'http://localhost:8080'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nameParam "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'name=javascript'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" host "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'?'")]),t._v(" nameParam"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h3",{attrs:{id:"undefined"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#undefined","aria-hidden":"true"}},[t._v("#")]),t._v(" undefined")]),n("p",[t._v("함수로 넘어가기 전에 한가지 추가적으로 알아두고 갑시다. 각 언어마다 숫자, 문자열등 기본으로 제공되는 타입이 존재합니다. 우리는 이런값들을 원형 데이터 타입(Primitive Data Type)이라고 부릅니다. 예를 들어, 자바스크립트에서는 문자열과 숫자 그리고 참/거짓 값을 나타내는 불린 타입이 원형 데이터 타입으로 존재합니다. 각 타입은 다양한 형태의 값을 가질 수 있습니다. 예를 들어, 숫자 타입은 "),n("code",[t._v("1, 100, 10.0f")]),t._v(" 등, 문자 타입은  "),n("code",[t._v('"Hello"')]),t._v(" 등이 존재합니다. 불린 타입은 2가지 값인 "),n("code",[t._v("true, false")]),t._v("만을 가지지요.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"Hello Node.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// string")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("100")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// number")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" boolean "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// boolean")]),t._v("\n")])])]),n("p",[t._v("자바스크립트는 다른 언어들과 달리 독특한 원형 데이터 타입이 하나 더 존재합니다. 바로 "),n("code",[t._v("undefined")]),t._v("입니다. "),n("code",[t._v("undefined")]),t._v(" 타입은 값으로도 "),n("code",[t._v("undefined")]),t._v(" 하나만을 가집니다.  그렇기 때문에 아래와 같이 사용할 수 있는 것입니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),n("p",[t._v("자바스크립트에서 "),n("code",[t._v("undefined")]),t._v("는 변수가 선언이 되었지만, 아직 값이 할당이 되지 않았다는 것을 나타내기위해 사용합니다. 다시 말해, 여러분이 변수를 선언하면 처음에는 undefined로 값이 설정이 한번 되었다가, 후에 값이 할당되면 해당 값으로 변경되는 방식입니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),n("h2",{attrs:{id:"배열"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#배열","aria-hidden":"true"}},[t._v("#")]),t._v(" 배열")]),n("h3",{attrs:{id:"생성"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#생성","aria-hidden":"true"}},[t._v("#")]),t._v(" 생성")]),n("p",[t._v("배열은 연관된 여러개의 값들을 순서를 매겨 사용하기 위해 자바스크립트에서 제공하는 데이터 구조입니다. 배열은 "),n("code",[t._v("대괄호")]),t._v("를 이용해서 만드시면 됩니다. 그리고 쉼표로 각 배열내의 아이템을 구분시켜주면 됩니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" emptyArray "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" array "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("배열을 왜 사용하는 걸까요? 예제를 통해서 알아봅시다. 친구들의 이름을 저장하고 있는 "),n("code",[t._v("friendNames")]),t._v(" 라는 변수를 만들어봅시다. 가장 기본적으로는 컴마(,)로 구분된 스트링을 만들 수 있을 것입니다. 하지만, 이 상태에서 한명 한명 이름을 출력하기 위해서는 문자열을 컴마로 잘라서 사용하는등의 후처리가 필요할 것입니다. 이런 방식은 친구 한명 한명 이름을 가지고 무언가를 수행하기에 매우 불편합니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Dan,Louie,Zach,Sang,Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("반면 배열을 이용하면, 배열이 기본으로 제공해주는 다양한 함수들 덕분에 보다 쉽게 데이터를 활용할 수 있게 됩니다. 예를 들어, 아래와 같이 총 몇명의 친구들이 있는지를 "),n("code",[t._v("length()")]),t._v(" 함수를 이용하면 됩니다. 혹은 친구중에 "),n("code",[t._v("Louie")]),t._v("라는 이름을 가지고 있는 사람이 있는지 확인하기 위해서는 "),n("code",[t._v("includes")]),t._v(" 함수를 사용하면 됩니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Zach'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Sang'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`The number of friends: ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// The number of friends: 5")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Is there Louie? ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("includes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Is there Louie? true")]),t._v("\n")])])]),n("h3",{attrs:{id:"사용"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#사용","aria-hidden":"true"}},[t._v("#")]),t._v(" 사용")]),n("p",[t._v("배열에 저장되어있는 값은 인덱스 번호를 통해서 접근할 수 있습니다. 배열의 인덱스 번호는 0부터 시작하기 때문에 "),n("code",[t._v("Dan")]),t._v("의 이름을 가져오기 위해서는 0번 값을 달라고 요청하면 됩니다. 요청하는 방법은 배열변수뒤에 대괄호로 인덱스번호를 주면 됩니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Zach'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Sang'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`First element? ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// First element? Dan")]),t._v("\n")])])]),n("p",[t._v("만약 여러분이 배열이 가지고 있는 인덱스 번호보다 큰 번호를 주게되면 어떻게 될까요? 많은 언어들이 이 상황에서 에러를 발생시키는 반면에 자바스크립트는 "),n("code",[t._v("undefined")]),t._v(" 값을 리턴합니다. 배열은 무한대의 인덱스 번호를 가지고 있고 그 공간은 존재하지만 "),n("code",[t._v("아직 값이 할당되지 않았다")]),t._v("라고 생각하시면 됩니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Zach'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Sang'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("10000")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),n("h3",{attrs:{id:"추가"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#추가","aria-hidden":"true"}},[t._v("#")]),t._v(" 추가")]),n("p",[t._v("미리 만들어져있는 배열에 새로운 값을 추가할 수 있습니다. 추가하는 방법은 크게 2가지입니다.")]),n("p",[t._v("첫번째 방법은 배열이 제공하는 함수인 "),n("code",[t._v("push")]),t._v(" 함수를 이용하는 것입니다. 푸쉬는 말 그대로 밀어넣는다는 의미입니다. 새롭게 들어간 값은 배열의 마지막 순서에 위치하게 됩니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Zach'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Sang'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfriendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Chris'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// [ 'Dan', 'Louie', 'Zach', 'Sang', 'Lloyd', 'Chris' ]")]),t._v("\n")])])]),n("p",[t._v("두번째 방법은 원하는 인덱스에 값을 넣는 방식입니다. 위에서 인덱스 범위를 넘어갔을때 "),n("code",[t._v("undefined")]),t._v(" 값이 리턴되는것을 기억하실 것입니다. 아직 값이 할당되지 않았기 때문이죠. 이제 그 값을 할당하면 되는 것입니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Zach'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Sang'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfriendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("6")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Chris'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// [ 'Dan', 'Louie', 'Zach', 'Sang', 'Lloyd', 'Chris' ]")]),t._v("\n")])])]),n("p",[t._v("여기에서 아마 중간을 뛰어넘고 값을 할당하면 어떻게 될지 궁금할거라고 생각됩니다. 중간에 값을 뛰어넘어도 정상적으로 값은 할당이 되고 그 사이에 있는 값들은 모두 여전히 "),n("code",[t._v("undefined")]),t._v(" 입니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Zach'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Sang'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfriendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("30")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Chris'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("/**\n[ 'Dan',\n  'Louie',\n  'Zach',\n  'Sang',\n  'Lloyd',\n  <25 empty items>,\n  'Chris' ]\n**/")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("15")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),n("h3",{attrs:{id:"삭제"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#삭제","aria-hidden":"true"}},[t._v("#")]),t._v(" 삭제")]),n("p",[t._v("배열에 새로운 값을 추가하는것과 비슷하게 삭제도 가능합니다. 삭제하는 함수는 "),n("code",[t._v("pop")]),t._v(" 입니다. 사실 "),n("code",[t._v("pop")]),t._v(" 함수는 단순히 배열에서 삭제를 한다기 보다는 값을 꺼내온다고 생각하시면 됩니다. 그러므로 "),n("code",[t._v("pop")]),t._v(" 함수의 리턴값은 배열에서 삭제된 값입니다. "),n("code",[t._v("pop")]),t._v(" 함수는 마지막 순서에 있는 값을 꺼내오게 됩니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" friendNames "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'Dan'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Louie'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Zach'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Sang'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token string"}},[t._v("'Lloyd'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("pop")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Lloyd")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// [ 'Dan', 'Louie', 'Zach', 'Sang' ]")]),t._v("\n")])])]),n("h3",{attrs:{id:"이터레이션"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#이터레이션","aria-hidden":"true"}},[t._v("#")]),t._v(" 이터레이션")]),n("p",[t._v("이제 배열을 돌면서 하나씩 아이템을 출력하는 코드를 작성해 봅시다. 자바스크립트 역시 다른 언어들과 마찬가지고 반복문으로 "),n("code",[t._v("for")]),t._v("가 존재합니다. "),n("code",[t._v("for")]),t._v("문은 총 3가지 구역으로 나누어져있습니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("구역 "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 구역 "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 구역 "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token comment"}},[t._v("// 실행될 코드")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("구역 1 : for문이 처음 실행될때 한번 실행되는 코드 구역")]),n("li",[t._v("구역 2 : for문 내부가 실행될지 말지 결정하는 조건")]),n("li",[t._v("구역 3 : for문이 반복될때마다 실행되는 코드")])]),n("p",[t._v("조금 복잡해 보일 수 있지만, 예제로 보면 간단합니다. 예제를 통해 위의 "),n("code",[t._v("friendNames")]),t._v("를 하나하나 출력해봅시다. 아래 예제에서 변수 "),n("code",[t._v("i")]),t._v("는 "),n("code",[t._v("for")]),t._v("문이 동작하면서 계속 값이 변경되기 때문에 "),n("code",[t._v("const")]),t._v("가 아닌 "),n("code",[t._v("let")]),t._v("을 사용한것을 기억해주세요. "),n("code",[t._v("i++")]),t._v("는 i의 값을 1증가시키는 코드로 "),n("code",[t._v("i = i + 1")]),t._v("과 동일한 코드입니다.")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" friendNames"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],o=a(0),e=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);s.default=e.exports}}]);